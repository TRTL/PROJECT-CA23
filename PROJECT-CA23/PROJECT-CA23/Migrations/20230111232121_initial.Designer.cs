// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PROJECT_CA23.Database;

#nullable disable

namespace PROJECTCA23.Migrations
{
    [DbContext(typeof(CA23Context))]
    [Migration("20230111232121_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("GenreMedia", b =>
                {
                    b.Property<int>("GenresGenreId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MediasMediaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("GenresGenreId", "MediasMediaId");

                    b.HasIndex("MediasMediaId");

                    b.ToTable("MediaGenre", (string)null);

                    b.HasData(
                        new
                        {
                            GenresGenreId = 1,
                            MediasMediaId = 1
                        },
                        new
                        {
                            GenresGenreId = 2,
                            MediasMediaId = 1
                        },
                        new
                        {
                            GenresGenreId = 3,
                            MediasMediaId = 1
                        },
                        new
                        {
                            GenresGenreId = 4,
                            MediasMediaId = 2
                        },
                        new
                        {
                            GenresGenreId = 2,
                            MediasMediaId = 2
                        },
                        new
                        {
                            GenresGenreId = 5,
                            MediasMediaId = 2
                        });
                });

            modelBuilder.Entity("PROJECT_CA23.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AddressText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AddressId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            AddressId = 1,
                            AddressText = "Address X1",
                            City = "City X1",
                            Country = "Country X1",
                            PostCode = "PostCode X1",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("PROJECT_CA23.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("GenreId");

                    b.HasAlternateKey("Name");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            Name = "Action"
                        },
                        new
                        {
                            GenreId = 2,
                            Name = "Drama"
                        },
                        new
                        {
                            GenreId = 3,
                            Name = "Sci-Fi"
                        },
                        new
                        {
                            GenreId = 4,
                            Name = "Crime"
                        },
                        new
                        {
                            GenreId = 5,
                            Name = "Thriller"
                        });
                });

            modelBuilder.Entity("PROJECT_CA23.Models.Media", b =>
                {
                    b.Property<int>("MediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Actors")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("Director")
                        .HasColumnType("TEXT");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT");

                    b.Property<string>("Plot")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Poster")
                        .HasColumnType("TEXT");

                    b.Property<string>("Runtime")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<string>("Writer")
                        .HasColumnType("TEXT");

                    b.Property<string>("Year")
                        .HasMaxLength(9)
                        .HasColumnType("TEXT");

                    b.Property<string>("imdbId")
                        .HasColumnType("TEXT");

                    b.Property<double?>("imdbRating")
                        .HasColumnType("REAL");

                    b.Property<decimal?>("imdbVotes")
                        .HasColumnType("TEXT");

                    b.HasKey("MediaId");

                    b.ToTable("Medias");

                    b.HasData(
                        new
                        {
                            MediaId = 1,
                            Actors = "Stephen Root, Sarah Goldberg, Anthony Carrigan",
                            Country = "A blade runner must pursue and terminate four replicants who stole a ship in space and have returned to Earth to find their creator.",
                            Director = "Ridley Scott",
                            Language = "English",
                            Plot = "Harrison Ford, Rutger Hauer, Sean Young",
                            Poster = "https://m.media-amazon.com/images/M/MV5BNzQzMzJhZTEtOWM4NS00MTdhLTg0YjgtMjM4MDRkZjUwZDBlXkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_SX300.jpg",
                            Runtime = "117 min",
                            Title = "Blade Runner",
                            Type = "movie",
                            Writer = "Hampton Fancher, David Webb Peoples, Philip K. Dick",
                            Year = "2013",
                            imdbId = "tt0083658",
                            imdbRating = 8.0999999999999996,
                            imdbVotes = 771646m
                        },
                        new
                        {
                            MediaId = 2,
                            Actors = "Bryan Cranston, Aaron Paul, Anna Gunn",
                            Country = "United States",
                            Language = "English",
                            Plot = "A chemistry teacher diagnosed with inoperable lung cancer turns to manufacturing and selling methamphetamine with a former student in order to secure his family's future.",
                            Poster = "https://m.media-amazon.com/images/M/MV5BYTU3NWI5OGMtZmZhNy00MjVmLTk1YzAtZjA3ZDA3NzcyNDUxXkEyXkFqcGdeQXVyODY5Njk4Njc@._V1_SX300.jpg",
                            Runtime = "49 min",
                            Title = "Breaking Bad",
                            Type = "series",
                            Writer = "Vince Gilligan",
                            Year = "2008–2013",
                            imdbId = "tt0903747",
                            imdbRating = 9.5,
                            imdbVotes = 1880303m
                        });
                });

            modelBuilder.Entity("PROJECT_CA23.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Shown")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Text")
                        .HasMaxLength(1000)
                        .HasColumnType("INTEGER");

                    b.Property<int>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("PROJECT_CA23.Models.Review", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MediaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReviewText")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserRating")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "MediaId");

                    b.HasIndex("MediaId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("PROJECT_CA23.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasAlternateKey("Username");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Created = new DateTime(2023, 1, 12, 1, 21, 21, 217, DateTimeKind.Local).AddTicks(2016),
                            FirstName = "Jonas",
                            IsDeleted = false,
                            LastLogin = new DateTime(2023, 1, 12, 1, 21, 21, 219, DateTimeKind.Local).AddTicks(5485),
                            LastName = "Jonaitis",
                            PasswordHash = new byte[] { 81, 194, 178, 166, 87, 220, 172, 52, 31, 158, 181, 137, 164, 100, 124, 13, 209, 73, 122, 99, 166, 199, 128, 190, 251, 76, 252, 67, 219, 152, 144, 227 },
                            PasswordSalt = new byte[] { 172, 141, 58, 93, 231, 246, 35, 168, 108, 216, 246, 10, 21, 208, 36, 196, 58, 216, 29, 128, 254, 84, 118, 118, 104, 60, 201, 102, 251, 131, 246, 157, 216, 100, 156, 81, 101, 139, 200, 88, 216, 129, 211, 153, 250, 207, 18, 44, 157, 172, 103, 55, 17, 55, 98, 218, 62, 216, 106, 0, 121, 19, 213, 137 },
                            Role = "admin",
                            Updated = new DateTime(2023, 1, 12, 1, 21, 21, 219, DateTimeKind.Local).AddTicks(5069),
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("PROJECT_CA23.Models.UserMedia", b =>
                {
                    b.Property<int>("UserMediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MediaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MediaStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserMediaId");

                    b.HasIndex("MediaId");

                    b.HasIndex("UserId");

                    b.ToTable("UserMedias");
                });

            modelBuilder.Entity("GenreMedia", b =>
                {
                    b.HasOne("PROJECT_CA23.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PROJECT_CA23.Models.Media", null)
                        .WithMany()
                        .HasForeignKey("MediasMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PROJECT_CA23.Models.Address", b =>
                {
                    b.HasOne("PROJECT_CA23.Models.User", "User")
                        .WithOne("Address")
                        .HasForeignKey("PROJECT_CA23.Models.Address", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PROJECT_CA23.Models.Notification", b =>
                {
                    b.HasOne("PROJECT_CA23.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PROJECT_CA23.Models.Review", b =>
                {
                    b.HasOne("PROJECT_CA23.Models.Media", "Media")
                        .WithMany("Reviews")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PROJECT_CA23.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PROJECT_CA23.Models.UserMedia", b =>
                {
                    b.HasOne("PROJECT_CA23.Models.Media", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PROJECT_CA23.Models.User", "User")
                        .WithMany("UserMedias")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PROJECT_CA23.Models.Media", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("PROJECT_CA23.Models.User", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Notifications");

                    b.Navigation("UserMedias");
                });
#pragma warning restore 612, 618
        }
    }
}
